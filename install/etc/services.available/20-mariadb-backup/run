#!/command/with-contenv bash

source /assets/functions/00-container
# shellcheck disable=SC2034
PROCESS_NAME="mariadb-backup"

check_container_initialized
check_service_initialized init 10-mariadb

TMPDIR=${TMPDIR:-"/tmp/backups"}

if [ "$1" != "NOW" ]; then
    if [ ! -f /tmp/.container/10-mariadb ]; then
        print_error "MariaDB has not properly initialized!"
        exit 1
    fi
    sleep 10
fi

if [ "$1" = "NOW" ]; then
    DB_BACKUP_DUMP_BEGIN=+0
    MANUAL=TRUE
fi

if var_true "${MANUAL}" ; then
   :
else
   liftoff
fi

### Set compression options
if var_true "${DB_BACKUP_PARALLEL_COMPRESSION}" ; then
    BZIP="pbzip2"
    GZIP="pigz"
    XZIP="pixz"
else
    BZIP="bzip2"
    GZIP="gzip"
    XZIP="xz"
fi

backup_mariadb() {
    if var_true "${DB_BACKUP_SPLIT_DB}" ;  then
        DATABASES=$(mysql -u"${DB_USER}" -p"${DB_PASS}" -h"${DB_HOST}" --batch -e "SHOW DATABASES;" | grep -v Database|grep -v schema)

        for db in $DATABASES; do
                if [[ "$db" != "information_schema" ]] && [[ "$db" != _* ]] ; then
                    print_info "Dumping database: $db at $(date)"
                    TARGET=mariadb_${db}_${DB_HOST}_${now}.sql
                    mysqldump --max-allowed-packet=512M -u"${DB_USER}" -p"${DB_PASS}" -h"${DB_HOST}" --databases "$db" > "${TMPDIR}"/"${TARGET}"
                    generate_md5
                    compression
                    move_backup
                fi
        done
    else
        mysqldump --max-allowed-packet=512M -A -u"$DB_USER" -p"${DB_PASS}" -h"${DB_HOST}" > "${TMPDIR}"/"${TARGET}"
        print_info "Dumping database: ${DB_NAME} at $(date)"
        generate_md5
        compression
        move_backup
    fi
}

compression() {
   case "${DB_BACKUP_COMPRESSION}" in
        "GZ" | "gz" | "gzip" | "GZIP")
        $GZIP "${TMPDIR}"/"${TARGET}"
        TARGET=${TARGET}.gz
        ;;
        "BZ" | "bz" | "bzip2" | "BZIP2" | "bzip" | "BZIP" | "bz2" | "BZ2")
        $BZIP "${TMPDIR}"/"${TARGET}"
        TARGET=${TARGET}.bz2
        ;;
        "XZ" | "xz" | "XZIP" | "xzip" )
        $XZIP "${TMPDIR}"/"${TARGET}"
        TARGET=${TARGET}.xz
        ;;
        "NONE" | "none" | "FALSE" | "false")
        ;;
    esac
}

generate_md5() {
if var_true "${DB_BACKUP_MD5}" ;  then
    cd "$TMPDIR" || exit
    md5sum "${TARGET}" > "${TARGET}".md5
fi
}

move_backup() {
    mkdir -p "${DB_BACKUP_DUMP_TARGET}"
    mv "${TMPDIR}"/*.md5 "${DB_BACKUP_DUMP_TARGET}"/
    mv "${TMPDIR}"/"${TARGET}" "${DB_BACKUP_DUMP_TARGET}"/"${TARGET}"
}

### Container startup
print_info "Backup functionality initialized at $(date)"

### Wait for next time to start backup
current_time=$(date +"%s")
today=$(date +"%Y%m%d")

if [[ ${DB_BACKUP_DUMP_BEGIN} =~ ^\+(.*)$ ]]; then
    waittime=$(( BASH_REMATCH[1] * 60 ))
else
    target_time=$(date --date="${today}${DB_BACKUP_DUMP_BEGIN}" +"%s")
    if [[ "$target_time" < "$current_time" ]]; then
        target_time=$((target_time + 24*60*60))
    fi
    waittime=$((target_time - current_time))
fi

sleep $waittime

### Commence backup
while true; do
    # make sure the directory exists
    mkdir -p "${TMPDIR}"

    ### Define target name
    now=$(date +"%Y%m%d-%H%M%S")
    TARGET=${DB_TYPE}_${DB_NAME}_${DB_HOST}_${now}.sql

    ### Check database ready
    sanity_db
    db_ready mariadb

    ### Take a dump
    backup_mariadb

    ### Zabbix
    if var_true "${CONTAINER_ENABLE_MONITORING}" ;  then
        silent zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k dbbackup.size -o "$(stat -c%s "${DB_BACKUP_DUMP_TARGET}"/"${TARGET}")"
        silent zabbix_sender -c /etc/zabbix/zabbix_agentd.conf -k dbbackup.datetime -o "$(date -r  "${DB_BACKUP_DUMP_TARGET}"/"${TARGET}" +'%s')"
    fi

    ### Automatic cleanup
    if [[ -n "${DB_BACKUP_CLEANUP_TIME}" ]]; then
          find "$DB_BACKUP_DUMP_TARGET"/  -mmin +"$DB_BACKUP_CLEANUP_TIME" -iname """${DB_TYPE}""_""${DB_NAME}""_*.*" -exec rm {} \;
    fi

    ### Go back to sleep until next backup time
    if [ "$MANUAL" = "TRUE" ]; then
        exit 1;
    else
        sleep $((DB_BACKUP_DUMP_FREQ * 60))
    fi

done
