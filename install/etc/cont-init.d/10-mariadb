#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
# shellcheck disable=SC2034
PROCESS_NAME="mariadb"

### Legacy environment variables conversion
if [ -n "$MYSQL_ROOT_PASSWORD" ]; then
    ROOT_PASS=${MYSQL_ROOT_PASSWORD}
fi

if [ -n "$MYSQL_DATABASE" ]; then
    DB_NAME=${MYSQL_DATABASE}
fi

if [ -n "$MYSQL_USER" ]; then
    DB_USER=${MYSQL_USER}
fi

if [ -n "$MYSQL_PASSWORD" ]; then
    DB_PASS=${MYSQL_PASSWORD}
fi

case "${DB_CONFIGURATION,,}" in
        "standard" )
            mysql_conf=standard.cnf
        ;;
        "default")
            mysql_conf=default.cnf
        ;;
       *)
            mysql_conf=default.cnf
esac

cp -R /assets/mariadb/"${mysql_conf}" /etc/mysql/my.cnf
mkdir -p /etc/mysql/conf.d

### Logging
mkdir -p "${LOG_PATH}"
chown -R mariadb:mariadb "${LOG_PATH}"

update_template /etc/mysql/my.cnf \
                                    DB_CHARACTER_SET \
                                    DB_COLLATION \
                                    LISTEN_PORT \
                                    LOG_FILE_ERROR \
                                    LOG_FILE_GENERAL_QUERY \
                                    LOG_FILE_SLOW_QUERY \
                                    LOG_PATH \
                                    SOCKET_FILE \
                                    SOCKET_PATH

sed -i -e "s|log_warnings = .*|log_warnings = ${LOG_LEVEL}|g" /etc/mysql/my.cnf

if var_true "${ENABLE_LOG_ERROR}" ; then
    create_logrotate mariadb-error "${LOG_PATH}"/"${LOG_FILE_ERROR}" mariadb-error mariadb mariadb
else
    sed -i "s|log_error = .*|log_error = /dev/null|g" /etc/mysql/my.cnf
fi

if var_true "${ENABLE_LOG_GENERAL_QUERY}" ; then
    sed -i "s|general_log =.*|general_log = 1|g" /etc/mysql/my.cnf
    create_logrotate mariadb-generalquery "${LOG_PATH}"/"${LOG_FILE_GENERAL_QUERY}" none mariadb mariadb
fi

if var_true "${ENABLE_LOG_SLOW_QUERY}" ; then
    sed -i "s|slow_query_log_log =.*|slow_query_log = 1|g" /etc/mysql/my.cnf
    create_logrotate mariadb-slowquery "${LOG_PATH}"/"${LOG_FILE_SLOW_QUERY}" none mariadb mariadb
fi

chmod -R 0644 /etc/mysql/

### Allow zabbix monitoring
if [ -n "${ROOT_PASS}" ] ; then
    if var_true "${CONTAINER_ENABLE_MONITORING}" && [ "${CONTAINER_MONITORING_BACKEND,,}" = "zabbix" ]; then
        source /assets/defaults/03-monitoring
        case "${ZABBIX_AGENT_TYPE,,}" in
            "1" | "c" | "classic" | "legacy" | "old" )
                print_debug "Configuring classic Zabbix Agent"
                update_template /etc/zabbix/.my.cnf \
                                                      ROOT_PASS \
                                                      SOCKET_FILE \
                                                      SOCKET_PATH
                chmod 0700 /etc/zabbix/.my.cnf
                chown -R zabbix /etc/zabbix
                mariadb_autoreg=mariadb-classic
    mysql_config=$(cat<<EOF
    UserParameter=mysql.status[*],echo "show global status where Variable_name='\$1';" | HOME=/etc/zabbix mysql -N | awk '{print \$\$2}'
    UserParameter=mysql.size[*],bash -c 'echo "select sum(\$(case "\$3" in both|"") echo "data_length+index_length";; data|index) echo "\$3_length";; free) echo "data_free";; esac)) from information_schema.tables\$([[ "\$1" = "all" || ! "\$1" ]] || echo " where table_schema=\"\$1\"")$([[ "\$2" = "all" || ! "\$2" ]] || echo "and table_name=\"\$2\"");" | HOME=/etc/zabbix mysql -N'
    UserParameter=mysql.ping,HOME=/etc/zabbix mysqladmin ping | grep -c alive
    UserParameter=mysql.version,mysql -V
EOF
                )
            ;;
            "2" | "m" | "n" | "modern" | "new" )
                print_debug "Configuring modern Zabbix agent"
                mariadb_autoreg=mariadb
    mysql_config=$(cat<<EOF
    Plugins.Mysql.Sessions.toi.Uri=${SOCKET_PATH}/${SOCKET_FILE}
    Plugins.Mysql.Sessions.toi.User=root
    Plugins.Mysql.Sessions.toi.Password=${ROOT_PASS}
EOF
                )
            ;;
            * )
                print_debug "No known Zabbix agent type selected"
            ;;
        esac

        cat <<EOF > "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit_mariadb.conf
# Zabbix MariaDB Configuration - Automatically Generated
# Find Companion Zabbix Server Templates at https://github.com/tiredofit/docker-mariadb
# Autoregister=${mariadb_autoreg}

${mysql_config}
EOF

        chmod 700 "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit_mariadb.conf
        chown zabbix:root "${ZABBIX_CONFIG_PATH}"/"${ZABBIX_CONFIG_FILE}.d"/tiredofit_mariadb.conf
    fi
fi

if [ -d "/var/lib/mysql/mysql" ]; then
	print_warn "MariaDB directory already present, skipping database creation"
    touch /var/lib/mysql/.version

    mariadb_run_major=$(echo "${MARIADB_VERSION}" | cut -d . -f 1,2)
    mariadb_file_major="$(head -n 1 /var/lib/mysql/.version | awk '{print $1}' | cut -d . -f 1,2)"
    if [ "${mariadb_run_major}" != "${mariadb_file_major}" ]; then
        print_warn "Data Files Major version: '${mariadb_file_major}', but image runtime major version: '${mariadb_run_major}'"
        if var_true "${DB_AUTO_UPGRADE}" ; then
            print_notice "Upgrading database files to '${MARIADB_VERSION}' version"
            silent /usr/bin/mysqld --defaults-file=/etc/mysql/my.cnf --user=mariadb --skip-name-resolve > /dev/null &

            ### Check database ready
            sanity_db
            db_ready mariadb

            silent mysql_upgrade -uroot -p"${ROOT_PASS}" --silent
            silent mysqladmin -uroot -p"${ROOT_PASS}" shutdown
            echo "${MARIADB_VERSION} upgraded on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')" | cat - /var/lib/mysql/.version > /tmp/.version && mv /tmp/.version /var/lib/mysql/.version
        else
            print_warn "Skipping upgrading databases to ${MARIADB_VERSION} version"
        fi
    fi

    if [ "${MARIADB_VERSION}" != "$(head -n 1 /var/lib/mysql/.version | awk '{print $1}')" ]; then
        print_warn "Installed version: '$(head -n 1 /var/lib/mysql/.version | awk '{print $1}')', but image version: '${MARIADB_VERSION}'"
        echo "${MARIADB_VERSION} started being used without executing 'mysql_upgrade' on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')" | cat - /var/lib/mysql/.version > /tmp/.version && mv /tmp/.version /var/lib/mysql/.version
    fi

    chown -R mariadb:mariadb /var/lib/mysql
else
	print_warn "MariaDB data directory is not found, creating initial DB(s)"
    sanity_var ROOT_PASS "Root Password"
    sanity_var DB_PASS "Database Password"

	mkdir -p /var/lib/mysql
    chown -R mariadb:mariadb /var/lib/mysql
    silent mysql_install_db --user=mariadb --basedir=/usr --datadir=/var/lib/mysql --defaults-file=/etc/mysql/my.cnf --auth-root-authentication-method=normal
    INIT_FILE=$(mktemp)

    cat <<EOSQL >"$INIT_FILE"
USE mysql;
FLUSH PRIVILEGES;
GRANT ALL ON *.* TO 'root'@'%' identified by 'ROOT_PASS' WITH GRANT OPTION;
GRANT ALL ON *.* TO 'root'@'localhost' identified by '$ROOT_PASS' WITH GRANT OPTION;
SET PASSWORD FOR 'root'@'localhost'=PASSWORD('${ROOT_PASS}');
SET PASSWORD FOR 'root'@'%'=PASSWORD('${ROOT_PASS}');
DROP DATABASE IF EXISTS test;
EOSQL

    if [[ -n "${DB_USER}" && -n "${DB_NAME}" ]]; then
        DATABASES=$(echo "${DB_NAME}" | tr "," "\n")

        for DATABASE in ${DATABASES}; do
            print_notice "Creating $DATABASE database"
            {
                echo "CREATE DATABASE IF NOT EXISTS \`${DATABASE}\` CHARACTER SET ${DB_CHARACTER_SET} COLLATE ${DB_COLLATION};"
                echo "GRANT ALL ON \`${DATABASE}\`.* TO '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASS}';"
                echo "GRANT ALL ON \`${DATABASE}\`.* TO '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASS}';"
            } >> "$INIT_FILE"
        done

        echo "FLUSH PRIVILEGES;" >> "$INIT_FILE"
    fi

    if [[ -n "${DB_USER}" && -z "${DB_NAME}" ]]; then
        print_notice "Creating ${DB_USER} database"
        {
            echo "FLUSH PRIVILEGES;"
            echo "CREATE DATABASE IF NOT EXISTS \`${DB_USER}\` CHARACTER SET ${DB_CHARACTER_SET} COLLATE ${DB_COLLATION};"
            echo "GRANT ALL PRIVILEGES ON \`${DB_USER}\`.* TO '${DB_USER}'@'%' IDENTIFIED BY '${DB_PASS}';"
        } >> "$INIT_FILE"
    fi

    chown -R mariadb:mariadb "$INIT_FILE"
    silent /usr/bin/mysqld --user=mariadb --bootstrap --skip-name-resolve --skip-networking=0 < "$INIT_FILE"
    echo "${MARIADB_VERSION} first installed on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')" > /var/lib/mysql/.version
    rm -f "$INIT_FILE"
fi

liftoff
